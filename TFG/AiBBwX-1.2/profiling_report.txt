Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 28.83      5.03     5.03 1296819264     0.00     0.00  kv::operator*(kv::interval<double> const&, kv::interval<double> const&)
 13.35      7.36     2.33 366287042     0.01     0.02  Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int)
 10.32      9.16     1.80 31389346     0.06     0.06  TestBox(typebox*, ConstData&, iTDAT&, int*)
  5.21     10.07     0.91  5784405     0.16     0.19  DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*)
  4.87     10.92     0.85 34706433     0.02     0.04  void boost::numeric::ublas::indexing_vector_assign<boost::numeric::ublas::scalar_assign, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > > const&)
  4.36     11.68     0.76                             main
  3.27     12.25     0.57 57844055     0.01     0.01  boost::enable_if_c<kv::acceptable_n<int, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<int>(int const&, kv::interval<double> const&)
  3.04     12.78     0.53 129536058     0.00     0.00  kv::operator+(kv::interval<double> const&, kv::interval<double> const&)
  3.04     13.31     0.53 34706433     0.02     0.03  kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&)
  2.92     13.82     0.51 115688110     0.00     0.00  kv::pow(kv::interval<double> const&, int)
  2.29     14.22     0.40 323926709     0.00     0.00  PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int)
  1.83     14.54     0.32  8472253     0.04     0.10  CFcBox(typebox*, ConstData, iTDAT, int*)
  1.49     14.80     0.26 80981677     0.00     0.00  boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::resize_internal(unsigned long, kv::interval<double>, bool)
  1.43     15.05     0.25 254513842     0.00     0.00  kv::autodif<kv::interval<double> >::autodif()
  1.43     15.30     0.25 40082128     0.01     0.01  boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<double>(double const&, kv::interval<double> const&)
  1.32     15.53     0.23 11568811     0.02     0.84  kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&)
  1.20     15.74     0.21 23137622     0.01     0.01  kv::operator/(kv::interval<double> const&, kv::interval<double> const&)
  1.03     15.92     0.18 11568811     0.02     1.04  fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&)
  1.03     16.10     0.18                             _init
  0.86     16.25     0.15 11568811     0.01     0.04  boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&)
  0.63     16.36     0.11 34706433     0.00     0.05  kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&)
  0.63     16.47     0.11 23137622     0.00     0.06  boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&)
  0.63     16.58     0.11 11568811     0.01     1.17  EvalBox(typebox*, ConstData&, iTDAT&, int*)
  0.57     16.68     0.10 23137622     0.00     0.00  boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::~unbounded_array()
  0.52     16.77     0.09 54747497     0.00     0.05  fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&)
  0.46     16.85     0.08 11568811     0.01     0.01  boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&)
  0.40     16.92     0.07 20041064     0.00     0.00  boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator/<double>(kv::interval<double> const&, double const&)
  0.40     16.99     0.07 11568811     0.01     0.01  SizeBox(typebox*&, int)
  0.29     17.04     0.05 11568813     0.00     0.01  GetMemBox(int)
  0.29     17.09     0.05 11568811     0.00     1.32  ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&)
  0.29     17.14     0.05 11568811     0.00     0.16  kv::pow(kv::autodif<kv::interval<double> > const&, int)
  0.29     17.19     0.05  8472253     0.01     0.29  kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&)
  0.23     17.23     0.04 11568811     0.00     0.01  boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&)
  0.23     17.27     0.04  8472253     0.00     0.00  boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator-<double>(double const&, kv::interval<double> const&)
  0.17     17.30     0.03 20041064     0.00     0.00  boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator+<double>(double const&, kv::interval<double> const&)
  0.17     17.33     0.03  8889105     0.00     0.00  FreeBox(typebox*, ConstData&, unsigned char, char const*)
  0.17     17.36     0.03  8472253     0.00     0.05  EvalBoxCentre(typebox*, ConstData, iTDAT, int*)
  0.11     17.38     0.02 23137622     0.00     0.00  boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::unbounded_array(boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > const&)
  0.11     17.40     0.02 11568813     0.00     0.00  GetMem(unsigned long, unsigned long, char const*)
  0.11     17.42     0.02 11568811     0.00     0.00  GE(double, double)
  0.11     17.44     0.02 11568810     0.00     0.00  EQ(double, double)
  0.06     17.45     0.01  8472253     0.00     0.05  EvalBPoint(typebox*, typebox*, ConstData, int*)
  0.00     17.45     0.00        9     0.00     0.00  ExistArg(char const*, int, char**)
  0.00     17.45     0.00        4     0.00     0.00  GetArg(char const*, int, char**)
  0.00     17.45     0.00        4     0.00     0.00  kv::conv_double::dtostring[abi:cxx11](double, int, char, int)
  0.00     17.45     0.00        2     0.00     0.00  boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >::resize(unsigned long, bool)
  0.00     17.45     0.00        2     0.00     0.00  std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&)
  0.00     17.45     0.00        1     0.00     0.00  DimfProblem(int)
  0.00     17.45     0.00        1     0.00     0.00  PrintParams(_IO_FILE*, ConstData&, double)
  0.00     17.45     0.00        1     0.00     0.00  ReadProblem(char*, ConstData&)
  0.00     17.45     0.00        1     0.00     0.00  NamefProblem(int)
  0.00     17.45     0.00        1     0.00     0.01  InitBox(ConstData&, iTDAT&, int*)
  0.00     17.45     0.00        1     0.00     0.00  OpenFile(char*, char const*)
  0.00     17.45     0.00        1     0.00     0.00  CloseFile(_IO_FILE*)
  0.00     17.45     0.00        1     0.00     0.00  GetParams(int, char**, ConstData&, double&)
  0.00     17.45     0.00        1     0.00     0.00  ConstData::~ConstData()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.06% of 17.45 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.0    0.76   16.51                 main [1]
                0.05   15.20 11568811/11568811     ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&) [2]
                0.91    0.18 5784405/5784405     DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
                0.17    0.00 2892319/31389346     TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
                0.00    0.00       1/1           InitBox(ConstData&, iTDAT&, int*) [44]
                0.00    0.00       2/11568813     GetMemBox(int) [35]
                0.00    0.00       2/8889105     FreeBox(typebox*, ConstData&, unsigned char, char const*) [39]
                0.00    0.00       1/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.00    0.00       2/2           boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >::resize(unsigned long, bool) [54]
                0.00    0.00       1/1           GetParams(int, char**, ConstData&, double&) [62]
                0.00    0.00       1/1           PrintParams(_IO_FILE*, ConstData&, double) [57]
                0.00    0.00       1/2           std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&) [55]
                0.00    0.00       1/1           ConstData::~ConstData() [63]
-----------------------------------------------
                0.05   15.20 11568811/11568811     main [1]
[2]     87.4    0.05   15.20 11568811         ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&) [2]
                0.11   13.45 11568811/11568811     EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
                1.63    0.01 28497027/31389346     TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
-----------------------------------------------
                0.11   13.45 11568811/11568811     ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&) [2]
[3]     77.7    0.11   13.45 11568811         EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
                0.18   11.85 11568811/11568811     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
                0.32    0.53 8472253/8472253     CFcBox(typebox*, ConstData, iTDAT, int*) [18]
                0.21    0.35 11568811/158049375     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.02    0.00 11568811/11568811     GE(double, double) [42]
-----------------------------------------------
                0.18   11.85 11568811/11568811     EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
[4]     68.9    0.18   11.85 11568811         fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
                0.23    9.47 11568811/11568811     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
                0.06    1.66 34706433/54747497     fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
                0.11    0.00 34706433/80981677     boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::resize_internal(unsigned long, kv::interval<double>, bool) [26]
                0.10    0.00 23137622/23137622     boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::~unbounded_array() [32]
                0.04    0.05 11568811/11568811     boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&) [33]
                0.06    0.00 46275244/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.05    0.00 46275244/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
                0.02    0.00 23137622/23137622     boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::unbounded_array(boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > const&) [40]
-----------------------------------------------
                0.23    9.47 11568811/11568811     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[5]     55.6    0.23    9.47 11568811         kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
                0.83    1.39 46275244/158049375     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.05    1.81 11568811/11568811     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.11    1.64 34706433/34706433     kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
                0.11    1.31 23137622/23137622     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
                0.53    0.55 34706433/34706433     kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [17]
                0.02    0.55 11568811/54747497     fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
                0.15    0.28 11568811/11568811     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
                0.08    0.03 11568811/11568811     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&) [31]
                0.02    0.00 11568811/20041064     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator+<double>(double const&, kv::interval<double> const&) [38]
                0.01    0.00 11568811/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.01    0.00 11568811/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
[6]     43.5    2.84    4.75 158049375+323925777 <cycle 1 as a whole> [6]
                2.33    4.75 366287042+130997765     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.51    0.00 115688110             kv::pow(kv::interval<double> const&, int) <cycle 1> [21]
-----------------------------------------------
                             130997765             Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                             231375289             kv::pow(kv::interval<double> const&, int) <cycle 1> [21]
                0.21    0.35 11568811/158049375     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.21    0.35 11568811/158049375     EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
                0.42    0.70 23137622/158049375     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
                0.76    1.27 42361265/158049375     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.83    1.39 46275244/158049375     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[7]     40.6    2.33    4.75 366287042+130997765 Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                4.19    0.00 1080925834/1296819264     kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
                0.46    0.00 46275244/57844055     boost::enable_if_c<kv::acceptable_n<int, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<int>(int const&, kv::interval<double> const&) [19]
                0.06    0.00 46275244/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.05    0.00 46275244/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
                             92550488             kv::pow(kv::interval<double> const&, int) <cycle 1> [21]
                             130997765             Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
-----------------------------------------------
                0.07    0.00 16944506/1296819264     CFcBox(typebox*, ConstData, iTDAT, int*) [18]
                0.10    0.00 25416759/1296819264     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.13    0.00 34706433/1296819264     kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
                0.54    0.00 138825732/1296819264     void boost::numeric::ublas::indexing_vector_assign<boost::numeric::ublas::scalar_assign, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > > const&) [15]
                4.19    0.00 1080925834/1296819264     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
[8]     28.8    5.03    0.00 1296819264         kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
-----------------------------------------------
                0.01    0.41 8472253/54747497     EvalBPoint(typebox*, typebox*, ConstData, int*) [23]
                0.02    0.55 11568811/54747497     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
                0.06    1.66 34706433/54747497     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[9]     15.6    0.09    2.62 54747497         fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
                0.05    2.43 8472253/8472253     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.15    0.00 46275244/80981677     boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::resize_internal(unsigned long, kv::interval<double>, bool) [26]
-----------------------------------------------
                0.05    2.43 8472253/8472253     fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
[10]    14.2    0.05    2.43 8472253         kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.76    1.27 42361265/158049375     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.11    0.00 16944506/40082128     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<double>(double const&, kv::interval<double> const&) [27]
                0.10    0.00 25416759/129536058     kv::operator+(kv::interval<double> const&, kv::interval<double> const&) [20]
                0.10    0.00 25416759/1296819264     kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
                0.04    0.00 8472253/8472253     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator-<double>(double const&, kv::interval<double> const&) [37]
                0.03    0.00 8472253/20041064     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator/<double>(kv::interval<double> const&, double const&) [34]
                0.01    0.00 8472253/20041064     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator+<double>(double const&, kv::interval<double> const&) [38]
-----------------------------------------------
                0.05    1.81 11568811/11568811     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[11]    10.6    0.05    1.81 11568811         kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.42    0.70 23137622/158049375     kv::pow(kv::interval<double> const&, int) <cycle 1> [21]
                0.21    0.35 11568811/158049375     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.11    0.00 11568811/57844055     boost::enable_if_c<kv::acceptable_n<int, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<int>(int const&, kv::interval<double> const&) [19]
                0.01    0.00 11568811/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.01    0.00 11568811/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                             323342731             TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
                0.17    0.00 2892319/31389346     main [1]
                1.63    0.01 28497027/31389346     ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&) [2]
[12]    10.4    1.80    0.01 31389346+323342731 TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
                0.01    0.00 3104698/8889105     FreeBox(typebox*, ConstData&, unsigned char, char const*) [39]
                             323342731             TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
-----------------------------------------------
                0.11    1.64 34706433/34706433     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[13]    10.0    0.11    1.64 34706433         kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
                0.85    0.54 34706433/34706433     void boost::numeric::ublas::indexing_vector_assign<boost::numeric::ublas::scalar_assign, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > > const&) [15]
                0.13    0.00 34706433/1296819264     kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
                0.09    0.00 69412866/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.03    0.00 34706433/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.11    1.31 23137622/23137622     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[14]     8.1    0.11    1.31 23137622         boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
                0.42    0.70 23137622/158049375     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.14    0.00 23137622/40082128     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<double>(double const&, kv::interval<double> const&) [27]
                0.03    0.00 23137622/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.02    0.00 23137622/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.85    0.54 34706433/34706433     kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
[15]     8.0    0.85    0.54 34706433         void boost::numeric::ublas::indexing_vector_assign<boost::numeric::ublas::scalar_assign, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > > const&) [15]
                0.54    0.00 138825732/1296819264     kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
-----------------------------------------------
                0.91    0.18 5784405/5784405     main [1]
[16]     6.2    0.91    0.18 5784405         DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
                0.07    0.00 11568810/11568811     SizeBox(typebox*&, int) [36]
                0.05    0.02 11568810/11568813     GetMemBox(int) [35]
                0.02    0.00 11568810/11568810     EQ(double, double) [43]
                0.02    0.00 5784405/8889105     FreeBox(typebox*, ConstData&, unsigned char, char const*) [39]
-----------------------------------------------
                0.53    0.55 34706433/34706433     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[17]     6.2    0.53    0.55 34706433         kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [17]
                0.43    0.00 104119299/129536058     kv::operator+(kv::interval<double> const&, kv::interval<double> const&) [20]
                0.09    0.00 69412866/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.03    0.00 34706433/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.32    0.53 8472253/8472253     EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
[18]     4.8    0.32    0.53 8472253         CFcBox(typebox*, ConstData, iTDAT, int*) [18]
                0.03    0.43 8472253/8472253     EvalBoxCentre(typebox*, ConstData, iTDAT, int*) [22]
                0.07    0.00 16944506/1296819264     kv::operator*(kv::interval<double> const&, kv::interval<double> const&) [8]
-----------------------------------------------
                0.11    0.00 11568811/57844055     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.46    0.00 46275244/57844055     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
[19]     3.3    0.57    0.00 57844055         boost::enable_if_c<kv::acceptable_n<int, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<int>(int const&, kv::interval<double> const&) [19]
-----------------------------------------------
                0.10    0.00 25416759/129536058     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.43    0.00 104119299/129536058     kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [17]
[20]     3.0    0.53    0.00 129536058         kv::operator+(kv::interval<double> const&, kv::interval<double> const&) [20]
-----------------------------------------------
                             92550488             Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.42    0.70 23137622/158049375     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
[21]     2.9    0.51    0.00 115688110         kv::pow(kv::interval<double> const&, int) <cycle 1> [21]
                             231375289             Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
-----------------------------------------------
                0.03    0.43 8472253/8472253     CFcBox(typebox*, ConstData, iTDAT, int*) [18]
[22]     2.6    0.03    0.43 8472253         EvalBoxCentre(typebox*, ConstData, iTDAT, int*) [22]
                0.01    0.42 8472253/8472253     EvalBPoint(typebox*, typebox*, ConstData, int*) [23]
-----------------------------------------------
                0.01    0.42 8472253/8472253     EvalBoxCentre(typebox*, ConstData, iTDAT, int*) [22]
[23]     2.5    0.01    0.42 8472253         EvalBPoint(typebox*, typebox*, ConstData, int*) [23]
                0.01    0.41 8472253/54747497     fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
-----------------------------------------------
                0.15    0.28 11568811/11568811     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[24]     2.4    0.15    0.28 11568811         boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
                0.21    0.00 23137622/23137622     kv::operator/(kv::interval<double> const&, kv::interval<double> const&) [29]
                0.04    0.00 11568811/20041064     boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator/<double>(kv::interval<double> const&, double const&) [34]
                0.01    0.00 11568811/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.01    0.00 11568811/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.00    0.00       1/323926709     main [1]
                0.01    0.00 11568811/323926709     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.01    0.00 11568811/323926709     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&) [31]
                0.01    0.00 11568811/323926709     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
                0.01    0.00 11568811/323926709     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
                0.03    0.00 23137622/323926709     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
                0.03    0.00 23137622/323926709     boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&) [33]
                0.06    0.00 46275244/323926709     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.06    0.00 46275244/323926709     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
                0.09    0.00 69412866/323926709     kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [17]
                0.09    0.00 69412866/323926709     kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
[25]     2.3    0.40    0.00 323926709         PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
-----------------------------------------------
                0.11    0.00 34706433/80981677     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
                0.15    0.00 46275244/80981677     fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [9]
[26]     1.5    0.26    0.00 80981677         boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::resize_internal(unsigned long, kv::interval<double>, bool) [26]
-----------------------------------------------
                0.11    0.00 16944506/40082128     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.14    0.00 23137622/40082128     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
[27]     1.4    0.25    0.00 40082128         boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<double>(double const&, kv::interval<double> const&) [27]
-----------------------------------------------
                0.01    0.00 11568811/254513842     kv::pow(kv::autodif<kv::interval<double> > const&, int) [11]
                0.01    0.00 11568811/254513842     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&) [31]
                0.01    0.00 11568811/254513842     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
                0.01    0.00 11568811/254513842     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
                0.02    0.00 23137622/254513842     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&) [14]
                0.02    0.00 23137622/254513842     boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&) [33]
                0.03    0.00 34706433/254513842     kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [17]
                0.03    0.00 34706433/254513842     kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&) [13]
                0.05    0.00 46275244/254513842     Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) <cycle 1> [7]
                0.05    0.00 46275244/254513842     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[28]     1.4    0.25    0.00 254513842         kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.21    0.00 23137622/23137622     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
[29]     1.2    0.21    0.00 23137622         kv::operator/(kv::interval<double> const&, kv::interval<double> const&) [29]
-----------------------------------------------
                                                 <spontaneous>
[30]     1.0    0.18    0.00                 _init [30]
-----------------------------------------------
                0.08    0.03 11568811/11568811     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[31]     0.6    0.08    0.03 11568811         boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&) [31]
                0.01    0.00 11568811/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.01    0.00 11568811/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.10    0.00 23137622/23137622     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[32]     0.6    0.10    0.00 23137622         boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::~unbounded_array() [32]
-----------------------------------------------
                0.04    0.05 11568811/11568811     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[33]     0.5    0.04    0.05 11568811         boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&) [33]
                0.03    0.00 23137622/323926709     PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [25]
                0.02    0.00 23137622/254513842     kv::autodif<kv::interval<double> >::autodif() [28]
-----------------------------------------------
                0.03    0.00 8472253/20041064     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.04    0.00 11568811/20041064     boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [24]
[34]     0.4    0.07    0.00 20041064         boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator/<double>(kv::interval<double> const&, double const&) [34]
-----------------------------------------------
                0.00    0.00       1/11568813     InitBox(ConstData&, iTDAT&, int*) [44]
                0.00    0.00       2/11568813     main [1]
                0.05    0.02 11568810/11568813     DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
[35]     0.4    0.05    0.02 11568813         GetMemBox(int) [35]
                0.02    0.00 11568813/11568813     GetMem(unsigned long, unsigned long, char const*) [41]
-----------------------------------------------
                0.00    0.00       1/11568811     InitBox(ConstData&, iTDAT&, int*) [44]
                0.07    0.00 11568810/11568811     DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
[36]     0.4    0.07    0.00 11568811         SizeBox(typebox*&, int) [36]
-----------------------------------------------
                0.04    0.00 8472253/8472253     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
[37]     0.2    0.04    0.00 8472253         boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator-<double>(double const&, kv::interval<double> const&) [37]
-----------------------------------------------
                0.01    0.00 8472253/20041064     kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [10]
                0.02    0.00 11568811/20041064     kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [5]
[38]     0.2    0.03    0.00 20041064         boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator+<double>(double const&, kv::interval<double> const&) [38]
-----------------------------------------------
                0.00    0.00       2/8889105     main [1]
                0.01    0.00 3104698/8889105     TestBox(typebox*, ConstData&, iTDAT&, int*) [12]
                0.02    0.00 5784405/8889105     DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
[39]     0.2    0.03    0.00 8889105         FreeBox(typebox*, ConstData&, unsigned char, char const*) [39]
-----------------------------------------------
                0.02    0.00 23137622/23137622     fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [4]
[40]     0.1    0.02    0.00 23137622         boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::unbounded_array(boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > const&) [40]
-----------------------------------------------
                0.02    0.00 11568813/11568813     GetMemBox(int) [35]
[41]     0.1    0.02    0.00 11568813         GetMem(unsigned long, unsigned long, char const*) [41]
-----------------------------------------------
                0.02    0.00 11568811/11568811     EvalBox(typebox*, ConstData&, iTDAT&, int*) [3]
[42]     0.1    0.02    0.00 11568811         GE(double, double) [42]
-----------------------------------------------
                0.02    0.00 11568810/11568810     DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [16]
[43]     0.1    0.02    0.00 11568810         EQ(double, double) [43]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[44]     0.0    0.00    0.00       1         InitBox(ConstData&, iTDAT&, int*) [44]
                0.00    0.00       1/11568811     SizeBox(typebox*&, int) [36]
                0.00    0.00       1/11568813     GetMemBox(int) [35]
-----------------------------------------------
                0.00    0.00       9/9           GetParams(int, char**, ConstData&, double&) [62]
[51]     0.0    0.00    0.00       9         ExistArg(char const*, int, char**) [51]
-----------------------------------------------
                0.00    0.00       4/4           GetParams(int, char**, ConstData&, double&) [62]
[52]     0.0    0.00    0.00       4         GetArg(char const*, int, char**) [52]
-----------------------------------------------
                0.00    0.00       4/4           std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&) [55]
[53]     0.0    0.00    0.00       4         kv::conv_double::dtostring[abi:cxx11](double, int, char, int) [53]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[54]     0.0    0.00    0.00       2         boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >::resize(unsigned long, bool) [54]
-----------------------------------------------
                0.00    0.00       1/2           main [1]
                0.00    0.00       1/2           PrintParams(_IO_FILE*, ConstData&, double) [57]
[55]     0.0    0.00    0.00       2         std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&) [55]
                0.00    0.00       4/4           kv::conv_double::dtostring[abi:cxx11](double, int, char, int) [53]
-----------------------------------------------
                0.00    0.00       1/1           GetParams(int, char**, ConstData&, double&) [62]
[56]     0.0    0.00    0.00       1         DimfProblem(int) [56]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[57]     0.0    0.00    0.00       1         PrintParams(_IO_FILE*, ConstData&, double) [57]
                0.00    0.00       1/1           NamefProblem(int) [59]
                0.00    0.00       1/2           std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&) [55]
-----------------------------------------------
                0.00    0.00       1/1           GetParams(int, char**, ConstData&, double&) [62]
[58]     0.0    0.00    0.00       1         ReadProblem(char*, ConstData&) [58]
                0.00    0.00       1/1           OpenFile(char*, char const*) [60]
                0.00    0.00       1/1           CloseFile(_IO_FILE*) [61]
-----------------------------------------------
                0.00    0.00       1/1           PrintParams(_IO_FILE*, ConstData&, double) [57]
[59]     0.0    0.00    0.00       1         NamefProblem(int) [59]
-----------------------------------------------
                0.00    0.00       1/1           ReadProblem(char*, ConstData&) [58]
[60]     0.0    0.00    0.00       1         OpenFile(char*, char const*) [60]
-----------------------------------------------
                0.00    0.00       1/1           ReadProblem(char*, ConstData&) [58]
[61]     0.0    0.00    0.00       1         CloseFile(_IO_FILE*) [61]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[62]     0.0    0.00    0.00       1         GetParams(int, char**, ConstData&, double&) [62]
                0.00    0.00       9/9           ExistArg(char const*, int, char**) [51]
                0.00    0.00       4/4           GetArg(char const*, int, char**) [52]
                0.00    0.00       1/1           ReadProblem(char*, ConstData&) [58]
                0.00    0.00       1/1           DimfProblem(int) [56]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[63]     0.0    0.00    0.00       1         ConstData::~ConstData() [63]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [23] EvalBPoint(typebox*, typebox*, ConstData, int*) [12] TestBox(typebox*, ConstData&, iTDAT&, int*) [13] kv::operator*(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&)
   [7] Monotonous(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, int) [9] fEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&) [8] kv::operator*(kv::interval<double> const&, kv::interval<double> const&)
   [2] ProcessBox(typebox*, double, ConstData&, AVLTree<kv::interval<double>, typebox*>&, AVLTree<kv::interval<double>, typebox*>&, int*, iTDAT&) [51] ExistArg(char const*, int, char**) [14] boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator*<double>(double const&, kv::autodif<kv::interval<double> > const&)
  [56] DimfProblem(int)       [60] OpenFile(char*, char const*) [27] boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<double>(double const&, kv::interval<double> const&)
  [57] PrintParams(_IO_FILE*, ConstData&, double) [4] fgEvalIA(int, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&, kv::interval<double>&, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&) [19] boost::enable_if_c<kv::acceptable_n<int, kv::interval<double> >::value, kv::interval<double> >::type kv::operator*<int>(int const&, kv::interval<double> const&)
  [58] ReadProblem(char*, ConstData&) [61] CloseFile(_IO_FILE*) [17] kv::operator+(kv::autodif<kv::interval<double> > const&, kv::autodif<kv::interval<double> > const&)
  [59] NamefProblem(int)      [16] DivideBox(typebox*&, typebox*&, typebox*&, ConstData&, iTDAT&, int*) [20] kv::operator+(kv::interval<double> const&, kv::interval<double> const&)
  [22] EvalBoxCentre(typebox*, ConstData, iTDAT, int*) [35] GetMemBox(int) [38] boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator+<double>(double const&, kv::interval<double> const&)
  [43] EQ(double, double)     [62] GetParams(int, char**, ConstData&, double&) [33] boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::unbounded_array(unsigned long, std::allocator<kv::autodif<kv::interval<double> > > const&)
  [42] GE(double, double)     [25] PrintitvV(_IO_FILE*, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, int) [32] boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > >::~unbounded_array()
   [5] kv::autodif<kv::interval<double> > fSHCB<kv::autodif<kv::interval<double> > >(boost::numeric::ublas::vector<kv::autodif<kv::interval<double> >, boost::numeric::ublas::unbounded_array<kv::autodif<kv::interval<double> >, std::allocator<kv::autodif<kv::interval<double> > > > > const&) [53] kv::conv_double::dtostring[abi:cxx11](double, int, char, int) [26] boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::resize_internal(unsigned long, kv::interval<double>, bool)
  [10] kv::interval<double> fSHCB<kv::interval<double> >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > const&) [11] kv::pow(kv::autodif<kv::interval<double> > const&, int) [40] boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > >::unbounded_array(boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > const&)
  [18] CFcBox(typebox*, ConstData, iTDAT, int*) [21] kv::pow(kv::interval<double> const&, int) [15] void boost::numeric::ublas::indexing_vector_assign<boost::numeric::ublas::scalar_assign, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > >(boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector_binary<boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::vector_binary_scalar1<kv::interval<double> const, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > >, boost::numeric::ublas::scalar_multiplies<kv::interval<double>, kv::interval<double> > >, boost::numeric::ublas::scalar_plus<kv::interval<double>, kv::interval<double> > > > const&)
  [52] GetArg(char const*, int, char**) [28] kv::autodif<kv::interval<double> >::autodif() [54] boost::numeric::ublas::vector<double, boost::numeric::ublas::unbounded_array<double, std::allocator<double> > >::resize(unsigned long, bool)
  [41] GetMem(unsigned long, unsigned long, char const*) [29] kv::operator/(kv::interval<double> const&, kv::interval<double> const&) [55] std::basic_ostream<char, std::char_traits<char> >& boost::numeric::ublas::operator<< <char, std::char_traits<char>, boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > >(std::basic_ostream<char, std::char_traits<char> >&, boost::numeric::ublas::vector_expression<boost::numeric::ublas::vector<kv::interval<double>, boost::numeric::ublas::unbounded_array<kv::interval<double>, std::allocator<kv::interval<double> > > > > const&)
   [3] EvalBox(typebox*, ConstData&, iTDAT&, int*) [24] boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator/<double>(kv::autodif<kv::interval<double> > const&, double const&) [63] ConstData::~ConstData()
  [39] FreeBox(typebox*, ConstData&, unsigned char, char const*) [34] boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator/<double>(kv::interval<double> const&, double const&) [30] _init
  [44] InitBox(ConstData&, iTDAT&, int*) [31] boost::enable_if_c<kv::acceptable_n<double, kv::autodif<kv::interval<double> > >::value, kv::autodif<kv::interval<double> > >::type kv::operator-<double>(double const&, kv::autodif<kv::interval<double> > const&) [1] main
  [36] SizeBox(typebox*&, int) [37] boost::enable_if_c<kv::acceptable_n<double, kv::interval<double> >::value, kv::interval<double> >::type kv::operator-<double>(double const&, kv::interval<double> const&) [6] <cycle 1>
